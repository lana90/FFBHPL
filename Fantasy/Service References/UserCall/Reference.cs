//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fantasy.UserCall {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserCall.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsValid", ReplyAction="http://tempuri.org/IUserService/IsValidResponse")]
        bool IsValid(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsValid", ReplyAction="http://tempuri.org/IUserService/IsValidResponse")]
        System.Threading.Tasks.Task<bool> IsValidAsync(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateUser", ReplyAction="http://tempuri.org/IUserService/CreateUserResponse")]
        bool CreateUser(string obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateUser", ReplyAction="http://tempuri.org/IUserService/CreateUserResponse")]
        System.Threading.Tasks.Task<bool> CreateUserAsync(string obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        bool UpdateUser(string obj, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(string obj, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        bool DeleteUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ReadUser", ReplyAction="http://tempuri.org/IUserService/ReadUserResponse")]
        string ReadUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ReadUser", ReplyAction="http://tempuri.org/IUserService/ReadUserResponse")]
        System.Threading.Tasks.Task<string> ReadUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ReadAllUsers", ReplyAction="http://tempuri.org/IUserService/ReadAllUsersResponse")]
        string[] ReadAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ReadAllUsers", ReplyAction="http://tempuri.org/IUserService/ReadAllUsersResponse")]
        System.Threading.Tasks.Task<string[]> ReadAllUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : Fantasy.UserCall.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<Fantasy.UserCall.IUserService>, Fantasy.UserCall.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsValid(string user, string password) {
            return base.Channel.IsValid(user, password);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidAsync(string user, string password) {
            return base.Channel.IsValidAsync(user, password);
        }
        
        public bool CreateUser(string obj) {
            return base.Channel.CreateUser(obj);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserAsync(string obj) {
            return base.Channel.CreateUserAsync(obj);
        }
        
        public bool UpdateUser(string obj, string email) {
            return base.Channel.UpdateUser(obj, email);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(string obj, string email) {
            return base.Channel.UpdateUserAsync(obj, email);
        }
        
        public bool DeleteUser(string email) {
            return base.Channel.DeleteUser(email);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string email) {
            return base.Channel.DeleteUserAsync(email);
        }
        
        public string ReadUser(string email) {
            return base.Channel.ReadUser(email);
        }
        
        public System.Threading.Tasks.Task<string> ReadUserAsync(string email) {
            return base.Channel.ReadUserAsync(email);
        }
        
        public string[] ReadAllUsers() {
            return base.Channel.ReadAllUsers();
        }
        
        public System.Threading.Tasks.Task<string[]> ReadAllUsersAsync() {
            return base.Channel.ReadAllUsersAsync();
        }
    }
}
